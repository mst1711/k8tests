server {
    listen 80;
    server_name _;

    location /video {
        rewrite /video/(.*) /$1 break;

        limit_except GET {
            deny  all;
        }

        root /opt/video/;
        error_page 410 = @expired;
        error_page 500 502 503 504 /50x.html;

        access_by_lua_block {
            
            -- use redis library
            local redis = require "resty.redis"
            local resolver = require "resty.dns.resolver"

            -- configure lua dns resolver
            local r, err = resolver:new{
                nameservers = {"127.0.0.11"}, -- <- docker dns server
                retrans = 5,
                timeout = 2000,
                no_random = true,
            }
            local answers, err, tries = r:query("redis", nil, {})

            -- connect to redis
            red, err = redis:new()
            local redis_ready = false
            for i, ans in ipairs(answers) do
                local ok, err = red:connect(ans.address, 6379)
                if ok then
                    redis_ready = true
                    break
                end
            end
            if not redis_ready then
                ngx.say("Redis isn't available")
                ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
            end

            -- try to get key (here we can user file name or md5sum, etc)
            -- now we use similar local file path and uri
            local res, err = red:get(ngx.var.uri)
            if not res or type(res) == "userdata" then
                ngx.exit(ngx.HTTP_GONE)
            end
        }

        # Limit bandwidth of stream
        limit_rate_after 8m;
        limit_rate 8m;

        # Byte-range options
        add_header Accept-Ranges bytes;
        mp4;
        mp4_buffer_size 1m;
        mp4_max_buffer_size 5m;
    }

    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    location @expired {
        return 410;
    }

}
